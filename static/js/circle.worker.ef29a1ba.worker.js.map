{"version":3,"sources":["../webpack/bootstrap","utils/render.js","WorkArea/circle.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","width","height","colorsRed","colorsGreen","generateBigCircles","fontSize","generateSmallCircles","checkBordersCircle","circle","Math","hypot","x","y","getCheckBordersText","data","eq","getRedColorOfPixel","getFont","getContext","OffscreenCanvas","createVirtualText","ctx","text","getFontSize","font","xStart","getTextWidth","yStart","fillText","measureText","candidate","iterations","Error","toString","getRandomInt","max","floor","random","getRandomFromArray","array","length","generate","acceptableRadius","colors","circles","checkBorders","totalNumber","counter","color","overlapping","existing","push","onmessage","event","fontSizeForCircles","forBigCircles","forSmallCircles","getImageData","non","console","log","generateCircles","postMessage"],"mappings":"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","file":"static/js/circle.worker.ef29a1ba.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const width = 700;\nexport const height = 700;\n\nconst protection = 50000;\nconst colorsRed = [\"#f49427\", \"#c9785c\", \"#fece00\", \"#f1b181\"];\nconst colorsGreen = [\"#7ba55e\", \"#89b370\", \"#b6c674\"];\n\n// For generate more big circles\nconst generateBigCircles = (fontSize) => {\n    return [fontSize / 20, fontSize / 25, fontSize / 30, fontSize / 35];\n}\n\n// For generate less small circles, its more beautiful, trust\nconst generateSmallCircles = (fontSize) => {\n    return [fontSize / 50, fontSize / 60];\n}\n\nexport const checkBordersCircle = (circle) => {\n    return Math.hypot(circle.x - (width / 2), circle.y - (height / 2)) + circle.r <= (width / 2)\n}\n\nfunction getRedColorOfPixel(data, circle) {\n    return data[(circle.y * (width * 4) + circle.x * 4) + 3];\n}\n\n// Generating all circles in the text and area\nexport function generateCircles(text, ctx = getContext()) {\n    let circles = [];\n\n    let fontSizeForCircles = createVirtualText(ctx, text);\n    if (text.length <= 2) {\n        fontSizeForCircles = getFontSize(ctx, \"aaa\")\n    }\n\n    //circle size is based on text length, so we need to fix circles number based on the same parameter\n    const totalNumber = text.length * 2000;\n\n    let forBigCircles = generateBigCircles(fontSizeForCircles);\n    let forSmallCircles = generateSmallCircles(fontSizeForCircles);\n\n    let data = ctx.getImageData(0, 0, width, height).data;\n\n    let non = 0;\n    for (let i = 3; i < data.length; i += 4) {\n        if (data[i] !== 0) non++;\n    }\n    console.log(\"non-zero ref pixels \" + non);\n\n    generate(forBigCircles, colorsGreen, circles, getCheckBordersText(data, false), totalNumber);\n    generate(forSmallCircles, colorsGreen, circles, getCheckBordersText(data, false), totalNumber);\n\n    let checkBorders = (circle) => checkBordersCircle(circle) && getCheckBordersText(data, true)(circle);\n    generate(forBigCircles, colorsRed, circles, checkBorders, totalNumber);\n    generate(forSmallCircles, colorsRed, circles, checkBorders, totalNumber);\n    return circles;\n}\n\nexport function getColorForUnblind(unblind, circle) {\n    return unblind ? (colorsRed.includes(circle.color) ? \"#d98b8b\" : \"#000000\") : circle.color;\n}\n\nfunction getCheckBordersText(data, eq) {\n    return (circle) => {\n        let result = getRedColorOfPixel(data, circle) === 0;\n        return result === eq;\n    };\n}\n\nfunction getFont(fontSize) {\n    return `${fontSize}px Arial`;\n}\n\nfunction getContext() {\n    const offscreenCanvas = new OffscreenCanvas(width, height);\n    return offscreenCanvas.getContext(\"2d\");\n}\n\nfunction createVirtualText(ctx, text) {\n    const fontSize = getFontSize(ctx, text);\n    ctx.font = getFont(fontSize);\n\n    let textWidth = getTextWidth(ctx, text);\n    // noinspection JSSuspiciousNameCombination\n    let textHeight = getTextWidth(ctx, \"M\");\n\n    let xStart = (width / 2) - (textWidth / 2);\n    let yStart = (height / 2) + (textHeight / 2);\n    ctx.fillText(text, xStart, yStart);\n    return fontSize;\n}\n\nfunction getTextWidth(ctx, text) {\n    return ctx.measureText(text).width;\n}\n\nfunction getFontSize(ctx, text) {\n    let candidate = 5;\n    let iterations = 0;\n    while (true) {\n        if (++iterations > 1000) throw new Error(iterations.toString())\n        ctx.font = getFont(candidate + 1);\n        let textWidth = getTextWidth(ctx, text);\n        let textHeight = getTextWidth(ctx, \"M\");\n        let xStart = (width / 2) - (textWidth / 2);\n        let yStart = (height / 2) + (textHeight / 2);\n\n        if (Math.hypot((width / 2) - xStart, (height / 2) - yStart) > width / 2) {\n            return candidate;\n        }\n        candidate = candidate + 1;\n    }\n}\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\n\nfunction getRandomFromArray(array) {\n    return array[getRandomInt(array.length)]\n}\n\n/**\n *\n * @param {Array<*>} acceptableRadius - array of possible radius depends of text size\n * @param {Array<string>} colors - array of possible colors\n * @param {Array<*>} circles - collect all circles in general array\n * @param {function(any): boolean} checkBorders - checking that the circles fit into the text\n * @param {number} totalNumber - how many circles will there be in the final drawing\n */\nexport const generate = (acceptableRadius, colors, circles, checkBorders, totalNumber) => {\n    let counter = 0;\n\n    // populate circles array\n    // brute force method continues until # of circles target is reached\n    // or until the protection value is reached\n    while (circles.length < totalNumber && counter < protection) {\n        let circle = {\n            x: getRandomInt(width),\n            y: getRandomInt(height),\n            r: getRandomFromArray(acceptableRadius),\n            color: getRandomFromArray(colors)\n        };\n        let overlapping = false;\n\n        if (!checkBorders(circle)) {\n            overlapping = true;\n        } else {\n            for (let i = 0; i < circles.length; i++) {\n                const existing = circles[i];\n                const distance = Math.hypot(circle.x - existing.x, circle.y - existing.y);\n                if (distance < circle.r + existing.r + 1) {\n                    // They are overlapping\n                    overlapping = true;\n                    // do not add to array\n                    break;\n                }\n            }\n        }\n\n        // add valid circles to array\n        if (!overlapping) {\n            circles.push(circle);\n        }\n\n        counter++;\n    }\n}\n\n","import {generateCircles} from \"../utils/render\";\n\nonmessage = (event) => {\n    const {text} = event.data;\n    let circles = generateCircles(text);\n    postMessage({\n        circles\n    });\n};\n"],"sourceRoot":""}